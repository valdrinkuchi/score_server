// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto_files/score.proto

package scorepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScoresClient is the client API for Scores service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoresClient interface {
	GetAggregatedCategoryScoresForPeriod(ctx context.Context, in *Interval, opts ...grpc.CallOption) (*AggregatedCategoryScoresResponse, error)
	GetTicketScoresForPeriod(ctx context.Context, in *Interval, opts ...grpc.CallOption) (*TicketScoresResponse, error)
	GetOverallScoreForPeriod(ctx context.Context, in *Interval, opts ...grpc.CallOption) (*OverallScoreResponse, error)
}

type scoresClient struct {
	cc grpc.ClientConnInterface
}

func NewScoresClient(cc grpc.ClientConnInterface) ScoresClient {
	return &scoresClient{cc}
}

func (c *scoresClient) GetAggregatedCategoryScoresForPeriod(ctx context.Context, in *Interval, opts ...grpc.CallOption) (*AggregatedCategoryScoresResponse, error) {
	out := new(AggregatedCategoryScoresResponse)
	err := c.cc.Invoke(ctx, "/score.Scores/GetAggregatedCategoryScoresForPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoresClient) GetTicketScoresForPeriod(ctx context.Context, in *Interval, opts ...grpc.CallOption) (*TicketScoresResponse, error) {
	out := new(TicketScoresResponse)
	err := c.cc.Invoke(ctx, "/score.Scores/GetTicketScoresForPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoresClient) GetOverallScoreForPeriod(ctx context.Context, in *Interval, opts ...grpc.CallOption) (*OverallScoreResponse, error) {
	out := new(OverallScoreResponse)
	err := c.cc.Invoke(ctx, "/score.Scores/GetOverallScoreForPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoresServer is the server API for Scores service.
// All implementations must embed UnimplementedScoresServer
// for forward compatibility
type ScoresServer interface {
	GetAggregatedCategoryScoresForPeriod(context.Context, *Interval) (*AggregatedCategoryScoresResponse, error)
	GetTicketScoresForPeriod(context.Context, *Interval) (*TicketScoresResponse, error)
	GetOverallScoreForPeriod(context.Context, *Interval) (*OverallScoreResponse, error)
	mustEmbedUnimplementedScoresServer()
}

// UnimplementedScoresServer must be embedded to have forward compatible implementations.
type UnimplementedScoresServer struct {
}

func (UnimplementedScoresServer) GetAggregatedCategoryScoresForPeriod(context.Context, *Interval) (*AggregatedCategoryScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedCategoryScoresForPeriod not implemented")
}
func (UnimplementedScoresServer) GetTicketScoresForPeriod(context.Context, *Interval) (*TicketScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketScoresForPeriod not implemented")
}
func (UnimplementedScoresServer) GetOverallScoreForPeriod(context.Context, *Interval) (*OverallScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverallScoreForPeriod not implemented")
}
func (UnimplementedScoresServer) mustEmbedUnimplementedScoresServer() {}

// UnsafeScoresServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoresServer will
// result in compilation errors.
type UnsafeScoresServer interface {
	mustEmbedUnimplementedScoresServer()
}

func RegisterScoresServer(s grpc.ServiceRegistrar, srv ScoresServer) {
	s.RegisterService(&Scores_ServiceDesc, srv)
}

func _Scores_GetAggregatedCategoryScoresForPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoresServer).GetAggregatedCategoryScoresForPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score.Scores/GetAggregatedCategoryScoresForPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoresServer).GetAggregatedCategoryScoresForPeriod(ctx, req.(*Interval))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scores_GetTicketScoresForPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoresServer).GetTicketScoresForPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score.Scores/GetTicketScoresForPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoresServer).GetTicketScoresForPeriod(ctx, req.(*Interval))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scores_GetOverallScoreForPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoresServer).GetOverallScoreForPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score.Scores/GetOverallScoreForPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoresServer).GetOverallScoreForPeriod(ctx, req.(*Interval))
	}
	return interceptor(ctx, in, info, handler)
}

// Scores_ServiceDesc is the grpc.ServiceDesc for Scores service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scores_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "score.Scores",
	HandlerType: (*ScoresServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAggregatedCategoryScoresForPeriod",
			Handler:    _Scores_GetAggregatedCategoryScoresForPeriod_Handler,
		},
		{
			MethodName: "GetTicketScoresForPeriod",
			Handler:    _Scores_GetTicketScoresForPeriod_Handler,
		},
		{
			MethodName: "GetOverallScoreForPeriod",
			Handler:    _Scores_GetOverallScoreForPeriod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_files/score.proto",
}
